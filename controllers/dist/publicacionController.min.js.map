{"version":3,"sources":["publicacionController.js"],"names":["PublicacionServicio","require","getPublicaciones","req","res","publicaciones","publicacionesProcesadas","regeneratorRuntime","async","_context","prev","next","console","awrap","limite","sent","log","map","pub","id","usuario_id","titulo","contenido","imagen","concat","video","setHeader","t0","json","stop","body","title","files","buffer","crearPublicacion","status","message","error","_context2","module","exports"],"mappings":"aAAA,IAAMA,oBAAsBC,QAAQ,mCAGpC,SAAeC,iBAAiBC,EAAKC,GAArC,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAE,QAAeV,IAAAA,iDAAfO,EAAAE,KAAA,EAAAJ,mBAAAM,MAAAb,oBAAAE,iBAAA,CAAAY,OAAA,MAAA,KAAA,EAAAT,EAAAI,EAAAM,KAAAH,QAAAI,IAAA,2BAAAX,GAAAC,EAAAD,EAAAY,IAAA,SAAAC,GAAA,MAAA,CAAAC,GAAAD,EAAAC,GAEQP,WAAYM,EAAAE,WAFpBC,OAAAH,EAAAG,OAAAC,UAAAJ,EAAAI,UAG2ER,OAAQI,EAAAK,OAAA,8CAAAC,OAAAN,EAAAC,IAAA,KAHnFM,MAAAP,EAAAO,MAAA,6CAAAD,OAAAN,EAAAC,IAAA,QAIQP,QAAAA,IAAQI,4BAARV,GAGIF,EAAAsB,UAAO,eAAA,oBACHP,EAAAA,KAAE,CAAED,MADD,mBAAAb,cAAAC,IAPnBG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,MAAA,GAUgBY,QAAAA,MAAQH,kCAARG,EAAAA,IACAC,EAAAA,OAAAA,KAASM,KAAMN,CAAAA,MAJZ,mCAPnB,KAAA,GAAA,IAAA,MAAA,OAAAb,EAAAoB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAiBQjB,SAAAA,iBAAYT,EAAAC,GAAZQ,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAEAR,QAAAA,IAAIsB,8BAFJd,EAGST,EAAA2B,KAAT1B,EAHAQ,EAGAR,WAASiB,EAHTT,EAGSS,OAAAC,EAHTV,EAGSU,UAAES,EAAO5B,EAAA6B,OAAA7B,EAAA6B,MAAA,OAAT7B,EAAA6B,MAAA,OAAA,GAAAC,OAAA,KAA6B5B,EAAAA,EAAAA,OAAeC,EAAAA,MAAAA,MAAAA,EAAAA,MAAAA,MAAAA,GAAAA,OAAAA,KApB7DM,QAAAI,IAAA,iCAAA,CAoCQI,WAAAA,EApCRC,OAAAA,EAAAC,UAAAA,EAAAC,OAAAA,EAAA,kBAAA,aAsBQX,MAAAA,EAAA,iBAAc,cALdA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MA2BMZ,oBAAoBkC,iBAAiBd,EAAYC,EAAQC,EAAWC,EAAQE,IA3BlFb,KAAAA,EAjBRA,QAAAI,IAAA,mCAAAZ,EAAA+B,OAAA,KAAAP,KAAA,CAAAQ,QAAA,oCAiBQxB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAjBRA,QAAAyB,MAAA,8BAAAC,EAAAX,IAAAvB,EAAA+B,OAAA,KAAAP,KAAA,CAAAS,MAAA,+BAiBQzB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,MAWR2B,OAAAC,QAAeN,CAAfhC,iBAAAA,iBA2BIgC,iBAAAA","file":"publicacionController.min.js","sourcesContent":["const PublicacionServicio = require('../servicio/publicacionServicio');\n\n// Obtener todas las publicaciones\nasync function getPublicaciones(req, res) {\n    try {\n        console.log('Solicitud recibida para obtener publicaciones');\n        const publicaciones = await PublicacionServicio.getPublicaciones({ limite: 10 });\n        console.log('Publicaciones obtenidas:', publicaciones);\n\n        const publicacionesProcesadas = publicaciones.map(pub => {\n            return {\n                id: pub.id,\n                usuario_id: pub.usuario_id,\n                titulo: pub.titulo,\n                contenido: pub.contenido,\n                imagen: pub.imagen ? `http://localhost:3000/publicaciones/imagen/${pub.id}` : null,\n                video: pub.video ? `http://localhost:3000/publicaciones/video/${pub.id}` : null\n            };\n        });\n\n        console.log('Publicaciones procesadas:', publicacionesProcesadas);\n\n        res.setHeader('Content-Type', 'application/json');\n        res.json({ title: 'Página Principal', publicaciones: publicacionesProcesadas });\n    } catch (error) {\n        console.error('Error al obtener publicaciones:', error);\n        res.status(500).json({ error: 'Error al obtener publicaciones' });\n    }\n}\n\n\nasync function crearPublicacion(req, res) {\n    console.log('Llamada a crearPublicacion');\n    const { usuario_id, titulo, contenido } = req.body;\n    const imagen = req.files && req.files['imagen'] ? req.files['imagen'][0].buffer : null;\n    const video = req.files && req.files['video'] ? req.files['video'][0].buffer : null;\n\n    // Log de depuración para los datos recibidos\n    console.log('Datos de la nueva publicación:', {\n        usuario_id,\n        titulo,\n        contenido,\n        imagen: imagen ? 'Imagen recibida' : 'Sin imagen',\n        video: video ? 'Video recibido' : 'Sin video'\n    });\n\n    try {\n        await PublicacionServicio.crearPublicacion(usuario_id, titulo, contenido, imagen, video);\n        console.log('Publicación creada exitosamente');\n        res.status(201).json({ message: 'Publicación creada exitosamente' });\n    } catch (error) {\n        console.error('Error al crear publicación:', error);\n        res.status(500).json({ error: 'Error al crear publicación' });\n    }\n}\n\nmodule.exports = {\n    getPublicaciones,\n    crearPublicacion\n};\n"]}