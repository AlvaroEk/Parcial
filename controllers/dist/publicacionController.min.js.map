{"version":3,"sources":["publicacionController.js"],"names":["PublicacionServicio","require","getPublicaciones","req","res","publicaciones","publicacionesProcesadas","regeneratorRuntime","async","_context","prev","next","console","awrap","sent","log","map","pub","id","usuario_id","titulo","contenido","imagen","concat","video","t0","json","error","stop","title","files","buffer","isNaN","status","crearPublicacion","message","_context2","module","exports"],"mappings":"aAAA,IAAMA,oBAAsBC,QAAQ,mCAGpC,SAAeC,iBAAiBC,EAAKC,GAArC,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAE,QAAeV,IAAAA,iDAAfO,EAAAE,KAAA,EAAAJ,mBAAAM,MAAAb,oBAAAE,oBAAA,KAAA,EAAAG,EAAAI,EAAAK,KAAAF,QAAAG,IAAA,2BAAAV,GAAAC,EAAAD,EAAAW,IAAA,SAAAC,GAAA,MAAA,CAAAC,GAAAD,EAAAC,GAEQN,WAAYK,EAAAE,WAFpBC,OAAAH,EAAAG,OAAAC,UAAAJ,EAAAI,UAYgBC,OAAQL,EAAIK,OAAJ,8CAAAC,OAA2DN,EAAIC,IAAO,KAZ9FM,MAAAP,EAAAO,MAAA,6CAAAD,OAAAN,EAAAC,IAAA,QAOYN,QAAAG,IAAO,4BAAAT,GAEHa,EAAAA,UAAAA,eAAgBA,oBAChBC,EAAAA,KAAAA,CAAAA,MAAYA,mBAHTf,cAAAC,IAPnBG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,MAAA,GAYgBa,QAAAA,MAAQL,kCAARK,EAAAA,IACAE,EAAAA,OAAK,KAAKE,KAACF,CAAJG,MAAA,mCAbvB,KAAA,GAAA,IAAA,MAAA,OAAAlB,EAAAmB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAoBQxB,SAAIsB,iBAAKvB,EAAAC,GAATA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GAAWyB,QAAAA,IAAAA,8BAAXzB,EAAqDE,EAAAA,KAAfD,EAAtCD,EAAsCC,WAAAA,EAAtCD,EAAsCC,OAAeC,EAArDF,EAAqDE,UAA5CgB,EAATnB,EAAA2B,OAAA3B,EAAA2B,MAAA,OAAA3B,EAAA2B,MAAA,OAAA,GAAAC,OAAA,KApBRP,EAAArB,EAAA2B,OAAA3B,EAAA2B,MAAA,MAAA3B,EAAA2B,MAAA,MAAA,GAAAC,OAAA,MAAAZ,GAAAa,MAAAb,GAoBQf,OAAAA,EAAAA,OAAAA,SApBRA,EAAA6B,OAAA,KAAAP,KAAA,CAAAC,MAAA,0DAoBQvB,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAGAA,QAAAA,IAAI6B,iCAAiB,CAAEN,WAAAA,EAAFP,OAAAA,EAmBrBC,UAAAA,EA1CRC,OAAAA,EAAA,kBAAA,aAAAE,MAAAA,EAAA,iBAAA,cAoBQpB,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,GAAAA,mBAAAA,MApBRJ,oBAAAkC,iBAAAf,EAAAC,EAAAC,EAAAC,EAAAE,IAoBQpB,KAAAA,GApBRQ,QAAAG,IAAA,mCAkDQX,EAAI6B,OAAO,KAAKP,KAAK,CAAES,QAAS,oCA9BhC/B,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAQRQ,QAAAe,MAAA,8BAAAS,EAAAX,IAyBQrB,EAAI6B,OAAO,KAAKP,KAAK,CAAEC,MAAO,+BAjC9BvB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,MAQRiC,OAAAC,QAAA,CACI1B,iBAAAA,iBADJsB,iBAAAA","file":"publicacionController.min.js","sourcesContent":["const PublicacionServicio = require('../servicio/publicacionServicio');\n\n// Obtener todas las publicaciones\nasync function getPublicaciones(req, res) {\n    try {\n        console.log('Solicitud recibida para obtener publicaciones');\n        const publicaciones = await PublicacionServicio.getPublicaciones();\n        console.log('Publicaciones obtenidas:', publicaciones);\n\n        const publicacionesProcesadas = publicaciones.map(pub => {\n            return {\n                id: pub.id,\n                usuario_id: pub.usuario_id,\n                titulo: pub.titulo,\n                contenido: pub.contenido,\n                imagen: pub.imagen ? `http://localhost:3000/publicaciones/imagen/${pub.id}` : null,\n                video: pub.video ? `http://localhost:3000/publicaciones/video/${pub.id}` : null\n            };\n        });\n\n        console.log('Publicaciones procesadas:', publicacionesProcesadas);\n\n        res.setHeader('Content-Type', 'application/json');\n        res.json({ title: 'Página Principal', publicaciones: publicacionesProcesadas });\n    } catch (error) {\n        console.error('Error al obtener publicaciones:', error);\n        res.status(500).json({ error: 'Error al obtener publicaciones' });\n    }\n}\n\n\nasync function crearPublicacion(req, res) {\n    console.log('Llamada a crearPublicacion');\n    const { usuario_id, titulo, contenido } = req.body;\n    const imagen = req.files && req.files['imagen'] ? req.files['imagen'][0].buffer : null;\n    const video = req.files && req.files['video'] ? req.files['video'][0].buffer : null;\n\n    // Validar usuario_id\n    if (!usuario_id || isNaN(usuario_id)) {\n        return res.status(400).json({ error: 'usuario_id es requerido y debe ser un número válido.' });\n    }\n\n    console.log('Datos de la nueva publicación:', {\n        usuario_id,\n        titulo,\n        contenido,\n        imagen: imagen ? 'Imagen recibida' : 'Sin imagen',\n        video: video ? 'Video recibido' : 'Sin video'\n    });\n\n    try {\n        await PublicacionServicio.crearPublicacion(usuario_id, titulo, contenido, imagen, video);\n        console.log('Publicación creada exitosamente');\n        res.status(201).json({ message: 'Publicación creada exitosamente' });\n    } catch (error) {\n        console.error('Error al crear publicación:', error);\n        res.status(500).json({ error: 'Error al crear publicación' });\n    }\n}\n\nmodule.exports = {\n    getPublicaciones,\n    crearPublicacion\n};\n"]}