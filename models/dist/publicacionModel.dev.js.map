{"version":3,"sources":["publicacionModel.js"],"names":["require","obtenerConexion","getAll","conexion","query","results","console","error","release","obtenerImagenPorId","id","length","imagen","obtenerVideoPorId","video","crearPublicacion","usuario_id","titulo","contenido","module","exports"],"mappings":"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","sourcesContent":["const { obtenerConexion } = require('../datebase/conexion');\n\nasync function getAll() {\n    const conexion = await obtenerConexion();\n    try {\n        const [results] = await conexion.query('SELECT * FROM publicaciones');\n        return results;\n    } catch (error) {\n        console.error('Error al seleccionar publicaciones', error);\n        throw error;\n    } finally {\n        conexion.release();\n    }\n}\n\n// Función para obtener una imagen por ID\nasync function obtenerImagenPorId(id) {\n    const conexion = await obtenerConexion();\n    try {\n        const [results] = await conexion.query('SELECT imagen FROM publicaciones WHERE id = ?', [id]);\n        if (results.length > 0) {\n            return results[0].imagen;  // Devuelve el campo de imagen\n        } else {\n            return null;  // No se encontró la imagen\n        }\n    } catch (error) {\n        console.error('Error al obtener la imagen:', error);\n        throw error;\n    } finally {\n        conexion.release();\n    }\n}\n\n// Función para obtener un vídeo por ID\nasync function obtenerVideoPorId(id) {\n    const conexion = await obtenerConexion();\n    try {\n        const [results] = await conexion.query('SELECT video FROM publicaciones WHERE id = ?', [id]);\n        if (results.length > 0) {\n            return results[0].video;  // Devuelve el campo de video\n        } else {\n            return null;  // No se encontró el video\n        }\n    } catch (error) {\n        console.error('Error al obtener el video:', error);\n        throw error;\n    } finally {\n        conexion.release();\n    }\n}\n\n// Crear una nueva publicación\nasync function crearPublicacion(usuario_id, titulo, contenido, imagen, video) {\n    const conexion = await obtenerConexion();\n    try {\n        await conexion.query(\n            'INSERT INTO publicaciones (usuario_id, titulo, contenido, imagen, video) VALUES (?, ?, ?, ?, ?)',\n            [usuario_id, titulo, contenido, imagen, video]\n        );\n    } catch (error) {\n        console.error('Error al crear la publicación:', error);\n        throw error;\n    } finally {\n        conexion.release();\n    }\n}\n\n\nmodule.exports = {\n    getAll,\n    crearPublicacion,\n    obtenerImagenPorId,\n    obtenerVideoPorId\n};"],"file":"publicacionModel.dev.js"}